{"version":3,"sources":["scripts/main.js"],"names":["baseURL","request","url","fetch","then","response","ok","Error","status","statusText","json","createList","arr","className","title","document","body","insertAdjacentHTML","map","phone","id","toUpperCase","join","getAllSuccessfulDetails","allPromises","Promise","all","phones","getFirstReceivedDetails","firstPromise","race","getThreeFastestDetails","threeFirstPronise","slice","getPhones","ids","catch","error"],"mappings":";AAAA,aAGA,IAAMA,EAAU,mEAEhB,SAASC,EAAQC,GACRC,OAAAA,MAAMD,GACVE,KAAK,SAAAC,GACA,IAACA,EAASC,GACN,MAAA,IAAIC,MAASF,GAAAA,OAAAA,EAASG,OAAYH,OAAAA,OAAAA,EAASI,aAG5CJ,OAAAA,EAASK,SAItB,SAASC,EAAWC,EAAKC,EAAWC,GAClCC,SAASC,KAAKC,mBAAmB,YAClBJ,oBAAAA,OAAAA,EACLC,kBAAAA,OAAAA,EAEJF,mBAAAA,OAAAA,EAAIM,IAAI,SAACC,GACHA,MAAAA,iBAAAA,OAAAA,EAAMC,GAAGC,cADP,mBAEPC,KAAK,IANZ,oBAWF,SAASC,EAAwBX,GACzBY,IAAAA,EAAcZ,EAAIM,IAAI,SAACE,GACpBnB,OAAAA,EAAWD,GAAAA,OAAAA,EAAWoB,KAAAA,OAAAA,EAA7B,YAGFK,QAAQC,IAAIF,GAAapB,KAAK,SAAAuB,GAC5BhB,EAAWgB,EAAQ,iBAAkB,yBAIzC,SAASC,EAAwBhB,GACzBiB,IAAAA,EAAejB,EAAIM,IAAI,SAACE,GACrBnB,OAAAA,EAAWD,GAAAA,OAAAA,EAAWoB,KAAAA,OAAAA,EAA7B,YAGFK,QAAQK,KAAKD,GAAczB,KAAK,SAAAe,GAC9BR,EAAW,CAACQ,GAAQ,kBAAmB,oBAI3C,SAASY,EAAuBnB,GACxBY,IAIAQ,EAJcpB,EAAIM,IAAI,SAACE,GACpBnB,OAAAA,EAAWD,GAAAA,OAAAA,EAAWoB,KAAAA,OAAAA,EAA7B,YAGoCa,MAAM,EAAG,GAE/CR,QAAQC,IAAIM,GAAmB5B,KAAK,SAAAe,GAClCR,EAAWQ,EAAO,uBAAwB,yBAI9C,IAAMe,EAAY,WACTjC,OAAAA,EAAWD,GAAAA,OAAAA,EAAX,UACJI,KAAK,SAAAuB,GACGA,OAAAA,KAIbO,IACG9B,KAAK,SAAAuB,GACEQ,IAAAA,EAAMR,EAAOT,IAAI,SAAA,GAAYE,OAATA,EAAAA,KAE1BG,EAAwBY,GACxBP,EAAwBO,GACxBJ,EAAuBI,KAExBC,MAAM,SAAAC,GAAS,OAAA,IAAI9B,MAAM,SAAU8B","file":"main.8a93f272.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// eslint-disable-next-line max-len\nconst baseURL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nfunction request(url) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nfunction createList(arr, className, title) {\n  document.body.insertAdjacentHTML('beforeend', `\n    <ul class=\"${className}\">\n      <h1>${title}</h1>\n\n      ${arr.map((phone) => `\n        <li>${phone.id.toUpperCase()}</li>\n      `).join('')}\n    </ul>\n  `);\n}\n\nfunction getAllSuccessfulDetails(arr) {\n  const allPromises = arr.map((id) => {\n    return request(`${baseURL}/${id}.json`);\n  });\n\n  Promise.all(allPromises).then(phones => {\n    createList(phones, 'all-successful', 'All Successful text');\n  });\n}\n\nfunction getFirstReceivedDetails(arr) {\n  const firstPromise = arr.map((id) => {\n    return request(`${baseURL}/${id}.json`);\n  });\n\n  Promise.race(firstPromise).then(phone => {\n    createList([phone], 'first-received ', 'First Received');\n  });\n}\n\nfunction getThreeFastestDetails(arr) {\n  const allPromises = arr.map((id) => {\n    return request(`${baseURL}/${id}.json`);\n  });\n\n  const threeFirstPronise = allPromises.slice(0, 3);\n\n  Promise.all(threeFirstPronise).then(phone => {\n    createList(phone, 'first-tree-received ', 'First Tree Received');\n  });\n}\n\nconst getPhones = () => {\n  return request(`${baseURL}.json`)\n    .then(phones => {\n      return phones;\n    });\n};\n\ngetPhones()\n  .then(phones => {\n    const ids = phones.map(({ id }) => id);\n\n    getAllSuccessfulDetails(ids);\n    getFirstReceivedDetails(ids);\n    getThreeFastestDetails(ids);\n  })\n  .catch(error => new Error('Error:', error));\n"]}